import{_ as c,V as p,W as i,Z as n,$ as s,X as e,Y as l,a4 as d,a0 as t,B as a}from"./framework-73f3449e.js";const u={},h=t('<h1 id="vue-router3-导航守卫种类" tabindex="-1"><a class="header-anchor" href="#vue-router3-导航守卫种类" aria-hidden="true">#</a> Vue Router3 导航守卫种类</h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>在实例应用中，诸如限制用户在登录后才能访问的需求十分常见，因此，对于项目中的<strong>导航</strong>（路由链接），可使用<strong>导航守卫</strong>控制每个路由的<strong>访问权限</strong></p><p><strong>Vue Router</strong> 提供的导航守卫，主要通过<strong>跳转</strong>或<strong>取消</strong>的方式守卫导航，要实现导航守卫功能，需使用路由实例 <code>router</code> 提供的实例方法</p>',4),g={href:"https://v3.router.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},k=n("strong",null,"种类",-1),b=n("h2",{id:"导航守卫本质",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#导航守卫本质","aria-hidden":"true"},"#"),s(" 导航守卫本质")],-1),f=n("p",null,[s("一个 Vue 实例从"),n("strong",null,"创建、运行、销毁"),s("的每一个时期，都对应各自的生命周期函数，也称为钩子函数，随组件的生命周期"),n("strong",null,"自动按序"),s("执行")],-1),v={class:"hint-container tip"},m=n("p",{class:"hint-container-title"},"组件生命周期",-1),_=t(`<p>相应地，一个完整的导航解析流程，可近似看作是一个导航的生命周期，在每个流程中都设有相应的钩子函数，因此本质上，<strong>每种守卫都是一种生命周期函数</strong></p><h2 id="导航守卫分类" tabindex="-1"><a class="header-anchor" href="#导航守卫分类" aria-hidden="true">#</a> 导航守卫分类</h2><p>按照导航守卫的使用时机与场景，可分为 <strong>4</strong> 类导航守卫与 <strong>1</strong> 个钩子函数</p><h3 id="一、全局前置守卫-beforeeach" tabindex="-1"><a class="header-anchor" href="#一、全局前置守卫-beforeeach" aria-hidden="true">#</a> 一、全局前置守卫（beforeEach）</h3><p>当一个导航触发时，全局前置守卫按照所有守卫的<strong>创建顺序</strong>被调用</p><p>守卫是<strong>异步解析执行</strong>，此时导航在所有守卫 resolve 完之前一直处于<strong>等待</strong>中</p><h4 id="调用语法" tabindex="-1"><a class="header-anchor" href="#调用语法" aria-hidden="true">#</a> 调用语法</h4><p>在已创建好的路由模块 <code>index.js</code> 中，在创建 <code>router</code> 实例后，调用其提供的实例方法 <code>beforeEach()</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 路由模块</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> form<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>router.beforeEach()</code> 为<strong>异步任务</strong>，接收一个<strong>异步回调函数</strong>，项目全局下只要有导航被触发，<strong>必然</strong>会触发该异步回调函数，它可接收以下三个形参（<strong>顺序不可乱</strong>）：</p><ol><li><p><strong>to</strong></p><ul><li>在导航被触发后，接收所访问路径（即将进入）对应的<strong>路由信息对象</strong></li><li>等同于<strong>将要访问</strong>的页面路径对应的 <code>this.$route</code></li></ul></li><li><p><strong>from</strong></p><ul><li>在导航被触发后，接收触发前页面路径（当前离开）所对应<strong>的路由信息对象</strong></li><li>等同于<strong>将要离开</strong>的页面路径对应的 <code>this.$route</code></li></ul></li><li><p><strong>next</strong></p><ul><li><p>该参数为一个<strong>函数</strong>，在守卫中<strong>必须</strong>要调用该方法来 resolve 每个守卫，每个守卫的执行效果完全依赖 <code>next</code> 方法的调用参数，守卫中若省略该方法，则页面所有导航都<strong>失去</strong>导航功能</p></li><li><p><code>next</code> 函数在完整的导航解析流程的每一步中，充当允许进入下一步的角色，参见<a href="">导航解析流程</a></p></li><li><p>依据不同的调用参数，导航守卫可实现 4 种执行效果：</p><ul><li><p>（1）直接调用，无需传参：<code>next()</code><br> 表示<strong>直接通过</strong>当前导航守卫，可进入下一个导航钩子函数，若全部钩子执行完毕，则该导航的状态就是 <code>confirmed</code>（导航成功）</p></li><li><p>（2）传入布尔值 false：<code>next(false)</code><br> 表示<strong>中断</strong>当前的导航，<strong>不允许跳转</strong>至任何页面，用户手动修改页面 URL 或点击浏览器历史后退按钮，页面 URL 会被重置到形参 <code>from</code> 路由对应的地址</p></li><li><p>（3）传入参数：<code>next(参数)</code><br> 表示<strong>中断</strong>当前导航的同时，<strong>开启新的导航</strong>跳转到参数指定的地址：</p><blockquote><ol><li>传入<strong>字符串</strong>：<br> 表示匹配路径的字符串，可携带查询参数，由 <code>？</code> 开始作引导</li><li>传入<strong>对象</strong>： <ul><li>可传入<strong>描述地址的对象</strong>，如 <code>{ path: &#39;/home&#39; }</code></li><li>可传入<strong>命名路由对象</strong>，如 <code>{ name: &#39;user&#39;, params: { userId: &#39;123&#39; }}</code></li><li>对象中允许设置诸如 <code>replace: true</code> 之类的选项以及任何用在 <code>router-link</code> 的 <code>to</code> 属性值，或 <code>router.push()</code> 方法的第一个参数（两者使用基本一致）</li></ul></li></ol></blockquote></li><li><p>（4）传入一个 <code>Error</code> 实例：<code>next(error)</code><br> 表示当前导航会被<strong>终止</strong>且该错误会被传递给 <code>router.onErroe()</code> 注册过的回调函数</p></li></ul></li></ul></li></ol><div class="hint-container info"><p class="hint-container-title">守卫触发时机</p><ul><li>页面初始渲染时</li><li>全局任何<strong>声明式</strong>或<strong>编程式</strong>导航被触发后，在路由信息对象中进行路径匹配，解析渲染映射组件之前，执行守卫逻辑</li></ul></div><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 要求必须有访问权限才可访问后台系统主页，否则跳转至登录页</span>
router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取localStorage中的token值</span>
  <span class="token keyword">const</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">!==</span> <span class="token string">&#39;/login&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">else</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、全局解析守卫-beforeresolve" tabindex="-1"><a class="header-anchor" href="#二、全局解析守卫-beforeresolve" aria-hidden="true">#</a> 二、全局解析守卫（beforeResolve ）</h3><p>与全局前置守卫类似，由全局<strong>任意导航</strong>触发，不同的是，全局解析守卫的触发时机是导航解析完毕（确认）<strong>之前</strong>，正如其使用到的方法名 beforeResolve</p><p><code>router.beforeResolve</code> 是获取数据或执行任何其他操作（如果用户无法进入页面时你希望避免执行的操作）的理想位置</p><h4 id="调用语法-1" tabindex="-1"><a class="header-anchor" href="#调用语法-1" aria-hidden="true">#</a> 调用语法</h4><p>在已创建好的路由模块 <code>index.js</code> 中，在创建 <code>router</code> 实例后，调用其提供的实例方法 <code>beforeResolve()</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 路由模块</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">beforeResolve</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> form<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>router.beforeResolve()</code> 同样接收一个<strong>异步回调函数</strong>，形参的使用与<a href="#%E8%B0%83%E7%94%A8%E8%AF%AD%E6%B3%95">全局前置守卫</a>中的一致，此处不再重复</p><p>在路由模块中：router.beforeResolve()，该方法同样接收一个回调函数，对应的形参与全局前置守卫一致</p><h3 id="三、全局后置钩子-aftereach" tabindex="-1"><a class="header-anchor" href="#三、全局后置钩子-aftereach" aria-hidden="true">#</a> 三、全局后置钩子（afterEach）</h3><h3 id="四、路由独享守卫-beforeenter" tabindex="-1"><a class="header-anchor" href="#四、路由独享守卫-beforeenter" aria-hidden="true">#</a> 四、路由独享守卫（beforeEnter）</h3><h3 id="五、组件内守卫" tabindex="-1"><a class="header-anchor" href="#五、组件内守卫" aria-hidden="true">#</a> 五、组件内守卫</h3><p>除了在全局以及路由配置中设置守卫，还可在组件切换渲染时设置导航守卫 根据进入组件、复用组件、离开组件可分为 3 类导航守卫</p><div class="hint-container tip"><p class="hint-container-title">路由组件</p><p>组件内守卫要想生效，前提是该组件是通过 Vue Router 的路由进行展示的</p></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><table><thead><tr><th></th><th>全局类守卫</th><th>路由独享守卫</th><th>组件内守卫</th></tr></thead><tbody><tr><td>具体守卫</td><td>beforeEach<br>beforeResolve<br>afterEach</td><td>beforeEnter</td><td>beforeRouteEnter<br>beforeRouteUpdate<br>beforeRouteLeave</td></tr><tr><td>定义位置</td><td>路由模块</td><td>路由配置</td><td>组件默认导入对象</td></tr><tr><td>触发对象</td><td>全局所有导航</td><td>导航至该路由配置</td><td>导航至组件所属路由（进入、复用、离开）</td></tr><tr><td>访问组件实例</td><td>无法访问</td><td>无法访问</td><td>除了 beforeRouteEnter 需通过 next 回调（唯一支持守卫）获取组件实例，其余可直接通过 this 访问</td></tr></tbody></table>`,29);function x(E,R){const o=a("ExternalLinkIcon"),r=a("RouterLink");return p(),i("div",null,[h,n("p",null,[s("下面将以 "),n("a",g,[s("Vue Router3"),e(o)]),s(" 的导航守卫为例，详细介绍导航守卫的"),k]),l(" more "),b,f,n("div",v,[m,n("p",null,[s("若你不了解组件生命周期，可参考这篇文章："),e(r,{to:"/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/Vue/%E8%AF%A6%E8%A7%A3Vue2%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html"},{default:d(()=>[s("详解 Vue2 组件生命周期")]),_:1})])]),_])}const j=c(u,[["render",x],["__file","VueRouter3导航守卫种类.html.vue"]]);export{j as default};
